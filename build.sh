#!/usr/bin/env bash
set -euo pipefail
shopt -s inherit_errexit

mkdir out/ || true
rm -r pkg/ || true
mkdir pkg/

RUSTFLAGS='-C target-feature=+atomics,+bulk-memory -Zlocation-detail=none' cargo build --target wasm32-unknown-unknown -Z build-std=panic_abort,std -Z build-std-features=panic_immediate_abort,optimize_for_size --release "$@"
echo "[epx] cargo finished"
wasm-bindgen --target web --out-dir out/ target/wasm32-unknown-unknown/release/rustls_wasm.wasm
echo "[epx] wasm-bindgen finished"

if ! [ "${RELEASE:-0}" = "1" ]; then
	WASMOPTFLAGS="-g"
else
	WASMOPTFLAGS=""
fi

mv out/rustls_wasm_bg.wasm out/rustls_wasm_unoptimized.wasm
time wasm-opt $WASMOPTFLAGS -Oz --vacuum --dce --enable-threads --enable-bulk-memory out/rustls_wasm_unoptimized.wasm -o out/rustls_wasm_bg.wasm
echo "[epx] wasm-opt finished"

# === js ===

AUTOGENERATED_SOURCE=$(<"out/rustls_wasm.js")

echo "$AUTOGENERATED_SOURCE" > pkg/rustls.js

WASM_BASE64=$(base64 -w0 out/rustls_wasm_bg.wasm)
AUTOGENERATED_SOURCE=${AUTOGENERATED_SOURCE//__wbg_init(input, maybe_memory) \{/__wbg_init(maybe_memory) \{$'\n'let input=\'data:application/wasm;base64,$WASM_BASE64\'}

echo "$AUTOGENERATED_SOURCE" > pkg/rustls-bundled.js

# === types ===

AUTOGENERATED_TYPES=$(<"out/rustls_wasm.d.ts")

AUTOGENERATED_TYPES=${AUTOGENERATED_TYPES//$'\n'export interface InitOutput*InitOutput;$'\n'/}
AUTOGENERATED_TYPES=${AUTOGENERATED_TYPES//Promise<InitOutput>/Promise<void>}

echo "$AUTOGENERATED_TYPES" > pkg/rustls.d.ts

# remove useless comment
AUTOGENERATED_TYPES=${AUTOGENERATED_TYPES//$'\n*' If $'`'module_or_path*$'}' module_or_path/}
AUTOGENERATED_TYPES=${AUTOGENERATED_TYPES//module_or_path*, /}

echo "$AUTOGENERATED_TYPES" > pkg/rustls-bundled.d.ts

cp out/rustls_wasm_bg.wasm pkg/rustls.wasm

rm -r out/
echo "[epx] done!"
